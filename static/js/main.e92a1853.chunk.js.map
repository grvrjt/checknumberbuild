{"version":3,"sources":["components/CheckNumber.js","App.js","serviceWorker.js","index.js"],"names":["CheckNumber","props","handleSelectedNumber","event","setState","selectedNumber","target","value","handleSubmit","randomNumber","generateRandomNumber","console","log","state","alertWin","success","title","confirmBtnText","onConfirm","hideAlert","alertLoose","info","closingAction","preventDefault","parseInt","Math","random","this","id","className","Form","onSubmit","Group","Control","as","onChange","custom","Button","type","variant","size","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sUAsGeA,E,kDAjGb,WAAaC,GAAQ,IAAD,8BAClB,cAAOA,IASTC,qBAAuB,SAAAC,GACrB,EAAKC,SAAU,CACbC,eAAgBF,EAAMG,OAAOC,SAZb,EAsBpBC,aAAe,SAAAL,GACb,IAAMM,EAAe,EAAKC,uBAE1B,GADAC,QAAQC,IAAK,sBAAuB,EAAKC,MAAMR,gBAC3CI,GAAgB,EAAKI,MAAMR,eAAgB,CAS7C,EAAKD,SAAU,CACbU,SARA,kBAAC,IAAD,CACEC,SAAO,EACPC,MAAM,6BACNC,eAAe,aACfC,UAAW,kBAAM,EAAKC,qBAMrB,CAWL,EAAKf,SAAU,CACbgB,WAVA,kBAAC,IAAD,CACEC,MAAI,EACJL,MAAM,yBACNM,eAAa,EACbL,eAAe,aACfC,UAAW,kBAAM,EAAKC,iBAQ5BhB,EAAMoB,kBAjDN,EAAKV,MAAQ,CACXC,SAAU,KACVM,WAAY,KACZf,eAAgB,GANA,E,mEAiBlB,IAAII,EAAee,SAA2B,EAAjBC,KAAKC,SAAgB,GAElD,OADAf,QAAQC,IAAK,sBAAuBH,GAC7BA,I,kCAqCPE,QAAQC,IAAK,mBACbe,KAAKvB,SAAU,CACbgB,WAAY,KACZN,SAAU,S,+BAIH,IACFT,EAAkBsB,KAAKd,MAAvBR,eACP,OACE,6BACE,wBAAIuB,GAAG,QAAO,+DAAd,KACA,yBAAKC,UAAU,cACb,kBAACC,EAAA,EAAD,CAAMC,SAAUJ,KAAKnB,cACnB,kBAACsB,EAAA,EAAKE,MAAN,KACE,kBAACF,EAAA,EAAKG,QAAN,CACEC,GAAG,SACH3B,MAAOF,EACP8B,SAAUR,KAAKzB,qBACfkC,QAAM,GAEN,4BAAQ7B,MAAM,IAAd,UACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,OAGJ,kBAAC8B,EAAA,EAAD,CAAQC,KAAK,SAASC,QAAQ,UAAUC,KAAK,MAA7C,2CAKHb,KAAKd,MAAMC,SACXa,KAAKd,MAAMO,gB,GA5FMqB,aCSXC,MARf,WACE,OACE,yBAAKb,UAAU,OACb,kBAAC,EAAD,QCIcc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAgB,SDuHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,c","file":"static/js/main.e92a1853.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport SweetAlert from 'react-bootstrap-sweetalert';\r\nimport {Carousel, Button, Form} from 'react-bootstrap';\r\n\r\nclass CheckNumber extends Component {\r\n  constructor (props) {\r\n    super (props);\r\n\r\n    this.state = {\r\n      alertWin: null,\r\n      alertLoose: null,\r\n      selectedNumber: 0,\r\n    };\r\n  }\r\n\r\n  handleSelectedNumber = event => {\r\n    this.setState ({\r\n      selectedNumber: event.target.value,\r\n    });\r\n  };\r\n\r\n  generateRandomNumber () {\r\n    let randomNumber = parseInt (Math.random () * 5 + 1);\r\n    console.log ('in generate number ', randomNumber);\r\n    return randomNumber;\r\n  }\r\n\r\n  handleSubmit = event => {\r\n    const randomNumber = this.generateRandomNumber ();\r\n    console.log ('selected number is ', this.state.selectedNumber);\r\n    if (randomNumber == this.state.selectedNumber) {\r\n      const getAlertWin = () => (\r\n        <SweetAlert\r\n          success\r\n          title=\"Hey !! You Are The Winner \"\r\n          confirmBtnText=\"Go Ahead  \"\r\n          onConfirm={() => this.hideAlert ()}\r\n        />\r\n      );\r\n      this.setState ({\r\n        alertWin: getAlertWin (),\r\n      });\r\n    } else {\r\n      const getAlertLoose = () => (\r\n        <SweetAlert\r\n          info\r\n          title=\"Oh !! You Have Lost !!\"\r\n          closingAction\r\n          confirmBtnText=\"Try Again \"\r\n          onConfirm={() => this.hideAlert ()}\r\n        />\r\n      );\r\n\r\n      this.setState ({\r\n        alertLoose: getAlertLoose (),\r\n      });\r\n    }\r\n    event.preventDefault ();\r\n  };\r\n\r\n  hideAlert () {\r\n    console.log ('Hiding alert...');\r\n    this.setState ({\r\n      alertLoose: null,\r\n      alertWin: null,\r\n    });\r\n  }\r\n\r\n  render () {\r\n    const {selectedNumber} = this.state;\r\n    return (\r\n      <div>\r\n        <h1 id=\"head\"><strong>Choose A Number From 1 To 5</strong> </h1>\r\n        <div className=\"numberForm\">\r\n          <Form onSubmit={this.handleSubmit}>\r\n            <Form.Group>\r\n              <Form.Control\r\n                as=\"select\"\r\n                value={selectedNumber}\r\n                onChange={this.handleSelectedNumber}\r\n                custom\r\n              >\r\n                <option value=\"\">Select</option>\r\n                <option value=\"1\">1</option>\r\n                <option value=\"2\">2</option>\r\n                <option value=\"3\">3</option>\r\n                <option value=\"4\">4</option>\r\n                <option value=\"5\">5</option>\r\n              </Form.Control>\r\n            </Form.Group>\r\n            <Button type=\"submit\" variant=\"success\" size=\"lg\">\r\n              Submit To Check Number Matched Or Not\r\n            </Button>\r\n          </Form>\r\n        </div>\r\n        {this.state.alertWin}\r\n        {this.state.alertLoose}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CheckNumber;\r\n","import React from 'react';\nimport './App.css';\nimport './checkNumber.css';\nimport CheckNumber from './components/CheckNumber';\n\nfunction App () {\n  return (\n    <div className=\"App\">\n      <CheckNumber />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n// import 'bootstrap/dist/css/bootstrap-theme.css';\n\nReactDOM.render (\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById ('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister ();\n"],"sourceRoot":""}